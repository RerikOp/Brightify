import ctypes
import os
import winshell
import sys
from pathlib import Path

from brightify import root_dir, app_name

bat_file = root_dir / "scripts" / "windows" / "brightify.bat"
no_console = root_dir / "scripts" / "windows" / "no-console.vbs"


def create_bat_file():
    # create a bat file to run the script
    content = f""":: This script is generated by Brightify
@echo off
:: Run the brightify script
python.exe -m brightify
pause
exit
    """
    Path(bat_file).parent.mkdir(parents=True, exist_ok=True)
    with open(bat_file, 'w+') as f:
        f.write(content)


def create_no_console_vbs():
    # create a vbs script to run the bat file without showing the console
    content = 'CreateObject("Wscript.Shell").Run \"\"\"\" & WScript.Arguments(0) & \"\"\"\", 0, False'
    Path(no_console).parent.mkdir(parents=True, exist_ok=True)
    with open(no_console, 'w+') as f:
        f.write(content)


def elevated_add_startup_task(force_console):
    create_bat_file()
    create_no_console_vbs()
    from brightify.scripts.windows import add_startup_task
    args = ["--force-console"] if force_console else []
    ctypes.windll.shell32.ShellExecuteW(None,  # hwnd
                                        "runas",  # operation
                                        sys.executable,  # program, the python interpreter
                                        f'"{add_startup_task.__file__}" {" ".join(args)}',  # script to run
                                        None,  # working directory
                                        1)  # show window


def elevated_remove_startup_task():
    from brightify.scripts.windows import remove_startup_task
    # run the script as admin
    ctypes.windll.shell32.ShellExecuteW(None,  # hwnd
                                        "runas",  # operation
                                        sys.executable,  # program, the python interpreter
                                        remove_startup_task.__file__,  # script to run
                                        None,  # working directory
                                        1)  # show window


def add_icon(force_console, directory):
    # create a shortcut in the directory folder
    Path(directory).mkdir(parents=True, exist_ok=True)
    shortcut_path = Path(directory) / f"{app_name}.lnk"
    with winshell.shortcut(str(shortcut_path)) as shortcut:
        shortcut: winshell.Shortcut
        if force_console:
            shortcut.path = str(bat_file)
        else:
            shortcut.path = "wscript.exe"
            shortcut.arguments = f"{str(no_console)} {str(bat_file)}"
        shortcut.description = f"Startup link for {app_name}"
        icon_path = root_dir / "res" / "icon_light.ico"
        if icon_path.exists():
            shortcut.icon_location = (str(icon_path), 0)


def add_menu_icon(force_console):
    create_bat_file()
    create_no_console_vbs()
    programs_folder = winshell.programs()
    add_icon(force_console, programs_folder)


def remove_menu_icon():
    programs_folder = winshell.programs()
    shortcut_path = Path(programs_folder) / f"{app_name}.lnk"
    if shortcut_path.exists():
        os.remove(shortcut_path)


def add_startup_icon(force_console):
    create_bat_file()
    create_no_console_vbs()
    startup_folder = winshell.startup()
    add_icon(force_console, startup_folder)


def remove_startup_folder():
    startup_folder = winshell.startup()
    shortcut_path = Path(startup_folder) / f"{app_name}.lnk"
    if shortcut_path.exists():
        os.remove(shortcut_path)
